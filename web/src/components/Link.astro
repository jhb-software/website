---
import { globalState } from '@/globalState'
import type { Link, Page } from 'cms/src/payload-types'
import { normalizePath } from '../utils/normalizePath'
import Icon from './icons/Icon.astro'

type Props =
  // When the data is a Link group from the CMS:
  | (Link & { class?: string; uppercase?: boolean })

  // When the data is a path (e.g. from a breadcrumb):
  | {
      path: string
      style: Link['style']
      class?: string
      icon?: Link['icon']
    }

function buttonStyles(style: Link['style']) {
  switch (style) {
    case 'primary':
      return 'bg-primary text-neutral-100 hover:bg-primary hover:bg-primaryDark'
    case 'text':
      return 'text-gray-700 hover:bg-neutral-200'
    case 'text-primary':
      return 'text-primary hover:bg-neutral-200'
    case 'light':
      return 'bg-neutral-200 hover:bg-neutral-300 text-gray-700'
    case 'light-primary':
      return 'bg-neutral-200 hover:bg-neutral-300 text-primary'
  }
}

const rawPath =
  'path' in Astro.props
    ? Astro.props.path
    : 'page' in Astro.props
      ? (Astro.props.page?.value as Page)?.path
      : undefined

if (!rawPath) {
  throw new Error('A path is required to build a link. Got: ' + JSON.stringify(Astro.props))
}

const { preview } = globalState
const href = normalizePath(rawPath, preview)
---

<a
  href={href}
  class:list={[
    'inline-flex items-center gap-3 rounded-md px-4 py-3 text-sm font-semibold no-underline transition-all duration-200',
    'uppercase' in Astro.props && Astro.props.uppercase && 'uppercase',
    buttonStyles(Astro.props.style),
    Astro.props.class,
  ]}
>
  {'label' in Astro.props ? Astro.props.label : <slot />}
  {'icon' in Astro.props && Astro.props.icon && <Icon name={Astro.props.icon} />}
</a>
