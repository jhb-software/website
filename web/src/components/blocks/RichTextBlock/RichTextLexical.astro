---
import type { CodeBlock as CodeBlockType } from 'cms/src/payload-types'
import type {
  BlockNode,
  HeadingNode,
  LexicalNode,
  LinkNode,
  ListNode,
  ParagraphNode,
  TextNode,
  UploadNode,
} from './types'

import CodeBlock from '../CodeBlock.astro'
import HeadingComponent from './nodes/HeadingComponent.astro'
import LinkComponent from './nodes/LinkComponent.astro'
import ListComponent from './nodes/ListComponent.astro'
import TableComponent from './nodes/TableComponent.astro'
import TextComponent from './nodes/TextComponent.astro'
import UploadComponent from './nodes/UploadComponent.astro'

type Props = { nodes: LexicalNode[] }

const { nodes } = Astro.props
---

{
  nodes?.map((node) => {
    let textIndent = ''
    if (node.indent) {
      textIndent = `indent-${node.indent * 6}`
    }

    switch (node.type) {
      case 'link':
      case 'autolink':
        return <LinkComponent node={node as LinkNode} />
      case 'text':
        return <TextComponent node={node as TextNode} />
      case 'heading':
        return <HeadingComponent node={node as HeadingNode} />
      case 'list':
        return <ListComponent node={node as ListNode} />
      case 'listitem':
        return <li>{<Astro.self nodes={node.children ?? []} />}</li>
      case 'quote':
        return <blockquote>{<Astro.self nodes={node.children ?? []} />}</blockquote>
      case 'paragraph':
        return (
          <p class:list={[textIndent]} style={{ 'text-align': (node as ParagraphNode).format }}>
            {<Astro.self nodes={node.children ?? []} />}
          </p>
        )
      case 'upload':
        return <UploadComponent node={node as UploadNode} />
      case 'block':
        switch ((node as BlockNode).fields.blockType) {
          case 'code':
            return <CodeBlock {...((node as BlockNode).fields as unknown as CodeBlockType)} />
          default:
            throw new Error('Block feature not implemented in RichTextBlock.astro')
        }
      case 'table':
        return <TableComponent node={node} />
      case 'horizontalrule':
        return <hr />
      case 'linebreak':
        return <br />
    }
  })
}
